import sys


class Logistics:
    def __init__(self):
        self.n = 0
        self.space = []
        self.count = 0
        self.x, self.y = [0], [0]
        self.u, self.d, self.l, self.r = 101, -1, 101, -1

    def read(self):
        self.n = int(sys.stdin.readline().strip('\n'))
        self.x *= self.n
        self.y *= self.n
        for i in range(self.n):
            line = sys.stdin.readline().strip('\n').split(' ')
            for j, sign in enumerate(line):
                if sign == '1':
                    # Update boundary
                    self.u, self.d = min(self.u, i), max(self.d, i)
                    self.l, self.r = min(self.l, j), max(self.r, j)
                    self.x[i] += 1
                    self.y[j] += 1
                    self.count += 1
                else:
                    self.space.append((i, j))

    def findStorage(self):
        if len(self.space) == 0:
            return 1

        res = float('inf')
        vx, vy = [0], [0]
        sumx, sumy = 0, 0

        for i in range(self.u, self.d + 1):
            vx[0] += self.x[i] * (i - self.u + 1)
        for i in range(self.u, self.d + 1):
            vx.append(vx[i - self.u] - self.count + 2 * sumx)
            sumx += self.x[i]

        for j in range(self.l, self.r + 1):
            vy[0] += self.y[j] * (j - self.l + 1)
        for j in range(self.l, self.r + 1):
            vy.append(vy[j - self.l] - self.count + 2 * sumy)
            sumy += self.y[j]

        for (row, col) in self.space:
            if self.u <= row <= self.d and self.l <= col <= self.r:
                res = min(res, vx[row - self.u + 1] + vy[col - self.l + 1])

        return res


if __name__ == "__main__":
    myLogistics = Logistics()
    myLogistics.read()
    print(myLogistics.findStorage())
